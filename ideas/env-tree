
  (define (env-binding env sym-or-term)

    (define (sym-ref alist sym)
      (assq sym alist))

    (define (term-ref pair-path-possibs term)
      (let ((t-env (term-env term)))

        (define (compare p o vars)
          (cond
            ((pair? p)
             (and (pair? o)
                  (let ((vars (compare (car p) (car o) vars)))
                    (and vars (compare (cdr p) (cdr o) vars)))))
            ((value? p)
             (let ((b (binding o t-env)))
               (and b
                    (eqv? (value-value p) (binding-val b))
                    vars)))
            ((variable? p)
             (cond
               ((assq p vars) => (lambda (a)
                                   (and (equal? o (cdr a))
                                        vars)))
               (else
                (let ((vty (variable-type p))
                      (oty (eval `(,$type ,o) t-env)))
                  (and (eval `((,$vau (oty vty) #F
                                 (,includes? oty vty))
                               ,oty ,vty)
                             t-env)
                       (cons (cons p o) vars))))))
            ((symbol? p)
             (and (eq? p o)
                  (not (binding o t-env))
                  vars))
            (else
             (and (equal? p o)
                  vars))))

        (let recur ((ps pair-path-possibs)
                    (obj (term-expr term))
                    (vars '()))
          (and (pair? ps)
               (let ((p (car ps)))
                 (cond ((and (pair? p) (pair? obj)
                             (compare (car p) (car obj) vars))
                        => (lambda (vars) (recur (cdr p) (cdr obj) vars)))
                       ((and (end? p)
                             (compare (end-possib p) obj vars))
                        (end-binding p))
                       (else
                        (recur (cdr ps) obj vars))))))))

    (if (symbol? sym-or-term)
      (sym-ref (environment-symbol-bindings env) sym-or-term)
      (term-ref (environment-term-bindings env) sym-or-term)))


  (define (bind env sym-or-term val)

    (define (sym-bind alist sym val)
      (cons (make-binding sym val) alist))

    (define (term-bind pair-path-possibs term val)
      (let ((t-env (term-env term)))

        (define (compare p o vars)
          (cond
            ((pair? p)
             (and (pair? o)
                  (let ((vars (compare (car p) (car o) vars)))
                    (and vars (compare (cdr p) (cdr o) vars)))))
            ((value? p)
             (and (symbol? o)
                  (let ((b (binding o t-env)))
                    (and b
                         (eqv? (value-value p) (binding-val b))
                         vars))))
            ((variable? p)
             (and (symbol? o)
                  (let ((b (binding o t-env)))
                    (and b
                         (let ((v (binding-val b)))
                           (and (variable? v)
                                (eqv? (variable-type p) (variable-type v))
                                (cond ((assq v vars)
                                       => (lambda (a) (and (eq? p (cdr a)) vars)))
                                      (else (cons (cons v p) vars)))))))))
            ((symbol? p)
             (and (eq? p o)
                  (not (binding o t-env))
                  vars))
            (else
             (and (equal? p o)
                  vars))))

        (define (compile o)
          (cond ((pair? o)
                 (cons (compile (car o)) (compile (cdr o))))
                ((and (symbol? o) (binding o t-env))
                 => (lambda (b)
                      (let ((v (binding-val b)))
                        (if (variable? v) v (make-value v)))))
                (else o)))

        (let recur ((ps pair-path-possibs)
                    (obj (term-expr term))
                    (vars '())
                    (rps '()))
          (if (pair? ps)
            (let ((p (car ps)))
              (define (update np)
                (rappend rps (cons np (cdr ps))))
              (cond
                ((and (pair? p) (pair? obj)
                      (compare (car p) (car obj) vars))
                 => (lambda (vars)
                      (update (cons (car p)
                                    (recur (cdr p) (cdr obj) vars '())))))
                ((and (end? p)
                      (compare (end-possib p) obj vars))
                 (update (make-end (end-possib p)
                                   (make-binding term val))))
                (else
                 (recur (cdr ps) obj vars (cons p rps)))))
            (cons
             (if (pair? obj)
               (cons (compile (car obj))
                     (recur '() (cdr obj) '() '()))
               (make-end (compile obj)
                         (make-binding term val)))
             (reverse rps))))))

    (if (symbol? sym-or-term)
      (make-environment
       (sym-bind (environment-symbol-bindings env) sym-or-term val)
       (environment-term-bindings env))
      (make-environment
       (environment-symbol-bindings env)
       (term-bind (environment-term-bindings env) sym-or-term val))))


(define (rappend rl l)
  (fold-left (lambda (a x) (cons x a)) l rl))

(define (binding expr env)
  (cond ((pair? expr) (env-binding env (make-term expr env)))
        ((symbol? expr) (env-binding env expr))
        (else (make-binding #F expr))))



($let ((a ($lambda ...))
       (b ...))
  ($let (('(a b c) ...))
    (get-current-environment)))
=>

[env symbols: ((a . ,A) (b . ,B))
     terms:
     (([val ,A] . (([val ,B] . ((c . ([end () ,VAL]))))
                   ...))
      ...)
     ]
